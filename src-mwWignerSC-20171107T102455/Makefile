# Makefile for WignerEquation - Copyright 2008 Maciej Woloszyn

# TODO : compiling without ACML (use CLAPACK instead)

# dynamiczne linkowanie zadzialalo z takimi opcjami (@bjs):
# gcc -L/usr/local/mw/acml4.0.0/gfortran64/lib  dgesdd_c_example.o   -lgfortran -lm -lacml -lacml_mv -o dgesdd_c_example.exe
# i potem uruchomienie:
# LD_LIBRARY_PATH=/usr/local/mw/acml4.0.0/gfortran64/lib ./dgesdd_c_example.exe
# (ustawienie LD_LIBRARY_PATH niepotrzebne jesli acml uwzglednione w ldconfig)

# for static linking package glibc-static-devel must be installed

PROG := mwWignerSC
DIST:=$(shell date +'src-mwWignerSC-%Y%m%dT%H%M%S.tgz')
DATE:=$(shell date +%Y%m%dT%H%M%S)

CXX := g++
#CXX := /opt/intel/Compiler/11.0/081/bin/intel64/icc

# Normal:
#CXXLINKLIBS := -lboost_program_options -lgfortran -lm -lacml -lacml_mv
# OpenMP:
CXXLINKLIBS := -lboost_program_options -lgfortran -lgomp -lrt -lm -lacml_mp

# Location of ACML installation
# Normal:
#ACMLDIR := /opt/acml/gfortran64
# OpenMP:
ACMLDIR := /opt/acml/gfortran64_mp

EXPORT_PATH := export LD_LIBRARY_PATH='$(ACMLDIR)/lib:$(LD_LIBRARY_PATH)'
#

# used only for static linking
# Normal:
#LIBACML := $(ACMLDIR)/lib/libacml.a
# OpenMP:
LIBACML := $(ACMLDIR)/lib/libacml_mp.a
CXXSTATICLINKLIBS := -lboost_program_options -lgfortran -lm

# for testing:
#CXXFLAGS := -I$(ACMLDIR)/include -Wall -Wextra -Wconversion -W  -O2 -march=athlon64 -DDEBUG
# for debugging with gdb:
#CXXFLAGS := -g -I$(ACMLDIR)/include -Wall -Wextra -Wconversion -W -DDEBUG
#
# for deployment:
# Normal:
#CXXFLAGS := -I$(ACMLDIR)/include -Wall -Wextra -Wconversion -W -O2 -march=native -mtune=native  -std=c++11
#CXXLINKFLAGS :=
# OpenMP:
#CXXFLAGS := -I$(ACMLDIR)/include -Wall -Wextra -Wconversion -W -O3 -march=native -mtune=native -fopenmp  -std=c++11
CXXFLAGS := -MMD -MP -I$(ACMLDIR)/include -Wall -Wextra -Wconversion -W -O3 -march=native -mtune=native -ftree-vectorize -funroll-loops -ffast-math -fopenmp  -std=c++11
CXXLINKFLAGS :=  -fopenmp

RM := rm -f
PROGSTATIC := $(PROG).static

SRC = $(wildcard *.cpp)
OBJECTS = $(SRC:%.cpp=%.o)


all : $(PROG)

$(PROG) : version $(OBJECTS)
	$(CXX) $(OBJECTS) $(CXXLINKFLAGS) $(CXXLINKLIBS) -o $(PROG)

# include automatically generated dependencies:
-include $(SRC:%.cpp=%.d)

version :
	date +'// do not edit this file by hand your changes will be overwritten %n#define VERSION "%F,%T"' > ver.h


static : $(OBJECTS)
	$(CXX) -static $(OBJECTS)  $(CXXLINKFLAGS) $(LIBACML)  $(CXXSTATICLINKLIBS) -o $(PROGSTATIC)

#$(CXX) -static  $(CXXLINKLIBS) -o $(PROGSTATIC) $(OBJECTS)



dist :
	tar cvzf $(DIST) *.cpp *.h Makefile*

clean:
	$(RM) *.o *.d

cleanall:
	$(RM) *~ *.o *.d $(PROG) $(PROGSTATIC)

profile :
	valgrind --tool=callgrind ./$(PROG)
	@echo "\n*** file callgrind.out.PID was created --> open it e.g. in KCacheGrind ***\n"

# end
